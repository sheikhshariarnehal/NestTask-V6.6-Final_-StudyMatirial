# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

## UI/UX Lessons

### Mobile-First Design
- Use `useMediaQuery` hook for responsive design decisions
- Implement slide-up animations for modals on mobile devices
- Use safe-area utilities for notched devices
- Ensure touch targets are at least 44x44px for better accessibility

### Animation Best Practices
- Use spring physics for natural-feeling animations (damping: 25, stiffness: 300)
- Implement staggered animations for lists/grids with small delays (0.05s per item)
- Add subtle scale transforms for interactive elements (active:scale-95)
- Use transform-gpu class for hardware acceleration

### Layout and Spacing
- Use consistent spacing scale (4, 8, 12, 16, 20, 24px)
- Implement proper padding for touch targets (min 12px)
- Use relative units for better responsiveness
- Maintain proper content hierarchy with consistent spacing

### Dark Mode
- Use semantic color naming (e.g., bg-gray-900 dark:bg-gray-800)
- Ensure sufficient contrast in both light and dark modes
- Use opacity for hover states instead of fixed colors
- Implement proper color transitions

### Loading States
- Show loading states immediately to prevent perceived lag
- Use skeleton loaders for content-heavy components
- Implement smooth transitions between loading and loaded states
- Provide clear error states with actionable fallbacks

### File Preview
- Optimize preview loading with proper loading indicators
- Support multiple file types with appropriate viewers
- Implement fallback options for unsupported file types
- Use proper error handling with user-friendly messages

### Modal Design
- Use different animation patterns for mobile (slide-up) vs desktop (scale)
- Implement proper backdrop blur and opacity (bg-black/80 backdrop-blur-md)
- Handle safe areas for notched devices with safe-top, safe-bottom classes
- Use pointer-events-none on containers and pointer-events-auto on content
- Implement proper z-index hierarchy (backdrop: 100, content: 200)
- Add overscroll-contain for better scroll behavior on mobile

### Interactive Elements
- Use min-height for buttons to ensure consistent touch targets
- Implement active states with transform-gpu and active:scale-95
- Add hover states with opacity changes instead of solid colors
- Use consistent border-radius (rounded-xl) for UI elements
- Implement proper focus states for keyboard navigation
- Add aria-labels for better accessibility

### File Grid
- Use CSS Grid with responsive columns (grid-cols-1 sm:grid-cols-2 lg:grid-cols-3)
- Implement aspect-ratio for consistent file card sizes
- Add staggered animations for better visual hierarchy
- Use consistent card design with hover effects
- Implement proper image handling with object-fit
- Add fallback UI for failed image loads

### File Type Handling
- Categorize files into image, video, audio, document, and other types
- Use appropriate preview methods for each file type
- Implement fallback previews for unsupported formats
- Add file type indicators with consistent iconography
- Handle large files with proper loading indicators
- Provide download options for all file types

### Error Handling
- Show user-friendly error messages with clear actions
- Provide fallback options (download, open in new tab)
- Use consistent error UI across different scenarios
- Add retry mechanisms where appropriate
- Implement proper error boundaries
- Handle network errors gracefully

### Performance
- Use transform-gpu for hardware-accelerated animations
- Implement proper lazy loading for images and previews
- Add loading indicators for all async operations
- Use proper image optimization techniques
- Handle large file lists with virtualization if needed
- Implement proper cleanup for resources

# Scratchpad